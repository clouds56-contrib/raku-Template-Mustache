=begin pod

Raku implementation of Mustache templates, L<http://mustache.github.io/>.

=head1 Synopsis

=begin code :allow< L B I >
use Template::Mustache;

# Call .render as a class method
Template::Mustache.render('Hello, {{planet}}!', { planet => 'world' }).say;

# Or instantiate an instance
my $stache = Template::Mustache.new: :from<./views>;

# Subroutines are called
say $stache.render('The time is {{time}}', {
    time => { ~DateTime.new(now).local }
});

my @people =
    { :name('James T. Kirk'), :title<Captain> },
    { :name('Wesley'), :title('Dread Pirate'), :emcee },
    { :name('Dana Scully'), :title('Special Agent') },
    ;

# See this template in B<L<./t/views/roster.mustache>>
$stache.render('roster', { :@people }).say;

my %context =
    event => 'Masters of the Universe Convention',
    :@people,
    ;
my %partials =
    welcome =>
        qq:b{Welcome to the {{event}}! We’re pleased to have you here.\n\n},
    ;

# See this result in B<L<./t/50-readme.t>>
Template::Mustache.render(q:to/EOF/,
        {{> welcome}}
        {{> roster}}

            Dinner at 7PM in the Grand Ballroom. Bring a chair!
        EOF
    %context,
    :from([%partials, './views'])
).say;

=end code

=head1 Extensions

=head2 Template inheritence

Support for C<hogan.js>-style
L<template inheritence|https://github.com/groue/GRMustache/blob/master/Guides/template_inheritance.md>
is available.

=head1 More Examples and Tests

The Mustache spec provides a wealth of examples to demonstrate exactly how the
format behaves.

L<https://github.com/mustache/spec/tree/master/specs/>

To run tests,

=begin code
# Using Raku's prove6 tool:
zef install App::Prove6
prove6 -Ilib -v

# or using Perl's prove:
RAKULIB=./lib prove -e raku -v
=end code

All spec tests pass: [https://travis-ci.org/softmoth/p6-Template-Mustache](https://travis-ci.org/softmoth/p6-Template-Mustache).
The perl6 branch just updates the .json files to match the .yml sources
(needed until someone writes a compliant YAML parser in Raku … hint, hint),
and adds Raku lambda code strings for that portion of the specs.

An updated copy of the tests is distributed in C<t/specs>. To check against
the official (outdated) specs repository, clone it into C<../mustache-spec>:

=begin code
# Ensure you are using the default 'perl6' branch, not 'master'
git clone git@github.com:softmoth/mustache-spec.git ../mustache-spec
git branch -v
=end code

The test file C<t/specs/inheritable_partials.json> is taken from
L<groue/GRMustache|https:/github.com/groue/GRMustache>.

=head1 Other Mustache Implementations

There are many, many Mustache implementations in various languages. Some of
note are:

=item The original Ruby version L<https://github.com/defunkt/mustache>
=item Twitter's hogan.js L<https://github.com/twitter/hogan.js>
=item mustache.java L<https://github.com/spullara/mustache.java>
=item GRMustache (Objective C) L<https://github.com/groue/GRMustache>
=item mustache.php L<https://github.com/bobthecow/mustache.php>

=head1 TODO

=item full object support (with method calls; currently the object is just stringified)
=item global helpers (context items that float at the top of the stack)
=item database loader
=item pragmas (FILTERS?)

=head1 License

L<Artistic License 2.0|http://www.perlfoundation.org/artistic_license_2_0>

=end pod
